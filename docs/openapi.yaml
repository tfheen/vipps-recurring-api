openapi: 3.0.0
info:
  description: >-
    # Recurring payments

    Recurring payments is used for subscription payments such as weekly dues for newspaper access, monthly dues for public transportation, etc.

    1. A draft agreement is initialized and the user is redirected for approval.

    2. The user approves the agreement and the merchant can call GET on the agreement to verify the status.

    3. The merchant can start sending charges which will be charged the user in the future.

    The merchant is responsible for checking the status of charges, and cancelling any user access if charges are failing (or contacting the user).

    ## Authentication

    See <a href="#/Access%20Controller/getAccessToken" target="_blank">Get Access Token</a>

    For information regarding authentication please read [our guide](https://github.com/vippsas/vipps-recurring-api/blob/master/vipps-recurring-api.md#authentication-and-authorization---api-access-token)
  version: 2.1.4
  title: Recurring Payments Merchant API
tags:
  - name: Access Controller
    description: Access Token Controller
  - name: Agreement Controller
    description: Agreement Token Controller
  - name: Charge Controller
    description: Charge Token Controller
paths:
  /accesstoken/get:
    post:
      servers:
        - url: https://api.vipps.no
        - url: https://apitest.vipps.no
      tags:
        - Access Controller
      summary: Get Access Token
      operationId: getAccessToken
      security:
        - ocpSubscriptionKey: []
      parameters:
        - name: client_id
          in: header
          required: true
          description: Provided Client ID
          schema:
            type: string
          example: fb492b5e-7907-4d83-ba20-c7fb60ca35de
        - name: client_secret
          in: header
          required: true
          description: Provided Client Secret
          schema:
            type: string
          example: Y8Kteew6GE2ZmeycEt6egg==
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/AccessTokenResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  /v2/agreements:
    get:
      tags:
        - Agreement Controller
      summary: List Agreements
      operationId: listAgreements
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      parameters:
        - name: status
          in: query
          required: false
          description: Filter by status
          schema:
            $ref: "#/components/schemas/AgreementStatus"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agreement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
    post:
      tags:
        - Agreement Controller
      summary: Create a new Agreement, to be confirmed in Vipps
      operationId: draftAgreement
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      parameters:
        - name: Idempotency-Key
          in: header
          required: false
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/AgreementRequest"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/AgreementReference"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          description: Unprocessable Entity (invalid json)
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/v2/agreements/{agreementId}":
    get:
      tags:
        - Agreement Controller
      summary: Fetch an Agreement
      operationId: getAgreement
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Agreement"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
      parameters:
        - $ref: "#/components/parameters/AgreementId"
    patch:
      tags:
        - Agreement Controller
      summary: Update an Agreement
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: updateAgreement
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgreementUpdate"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/AgreementUpdateReference"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/v2/agreements/{agreementId}/charges":
    get:
      tags:
        - Charge Controller
      summary: List Charges
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: listCharges
      parameters:
        - $ref: "#/components/parameters/AgreementId"
        - name: chargeStatus
          in: query
          required: false
          description: The status of the charge
          schema:
            $ref: "#/components/schemas/ChargeStatus"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: Success
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Charge"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
    post:
      tags:
        - Charge Controller
      summary: Create a new charge
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: createCharge
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency-Key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/ChargeRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ChargeReference"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/v2/agreements/{agreementId}/charges/{chargeId}":
    get:
      tags:
        - Charge Controller
      summary: Fetch a Charge
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: getCharge
      responses:
        "200":
          description: Success
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Charge"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
      parameters:
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
    delete:
      tags:
        - Charge Controller
      summary: Cancel a Charge
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: cancelCharge
      parameters:
        - name: Idempotency-Key
          in: header
          required: false
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: This charge is not in a deletable state, it may have already been
            charged to the user.
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/v2/agreements/{agreementId}/charges/{chargeId}/refund":
    post:
      tags:
        - Charge Controller
      summary: Refund a charge
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: refundCharge
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundRequest"
        required: true
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServerError"
        "503":
          $ref: "#/components/responses/UnavailableError"
        "504":
          $ref: "#/components/responses/TimeoutError"
  "/v2/agreements/{agreementId}/charges/{chargeId}/capture":
    post:
      tags:
        - Charge Controller
      summary: Capture a reserved charge
      security:
        - bearerAuth: []
          ocpSubscriptionKey: []
      operationId: captureCharge
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency key
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
          schema:
            $ref: "#/components/schemas/IdempotencyKeyFormat"
        - $ref: "#/components/parameters/AgreementId"
        - $ref: "#/components/parameters/ChargeId"
        - $ref: "#/components/parameters/Vipps-System-Name"
        - $ref: "#/components/parameters/Vipps-System-Version"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Name"
        - $ref: "#/components/parameters/Vipps-System-Plugin-Version"
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequestError"
servers:
  - url: https://api.vipps.no/recurring
    description: Production environment
  - url: https://apitest.vipps.no/recurring
    description: Merchant Test environment
components:
  parameters:
    AgreementId:
      name: agreementId
      in: path
      required: true
      description: The agreement identifier (id)
      schema:
        type: string
      example: agr_5kSeqzFAMkfBbc
    ChargeId:
      name: chargeId
      in: path
      required: true
      description: The charge identifier (id)
      schema:
        type: string
      example: chr_123abc456
    Vipps-System-Name:
      name: Vipps-System-Name
      in: header
      description: The name of the ecommerce solution. One word in lowercase letters is good.
      schema:
        type: string
      example: woocommerce
    Vipps-System-Version:
      name: Vipps-System-Version
      in: header
      description: The version number of the ecommerce solution.
      schema:
        type: string
      example: "5.4"
    Vipps-System-Plugin-Name:
      name: Vipps-System-Plugin-Name
      in: header
      description: The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
      schema:
        type: string
      example: "vipps-woocommerce"
    Vipps-System-Plugin-Version:
      name: Vipps-System-Plugin-Version
      in: header
      description: The version number of the ecommerce plugin (if applicable).
      schema:
        type: string
      example: "1.2.1"
    Content-Type:
      in: header
      name: Content-Type
      description: "The content type must be `application/json`"
      required: true
      schema:
        type: string
      example: application/json
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: >-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        The access token is fetched from the `POST:/accesstoken/get` endpoint.
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      bearerFormat: JWT
    ocpSubscriptionKey:
      type: apiKey
      in: header
      name: Ocp-Apim-Subscription-Key
      description: >-
        The subscription key for your API product is available on portal.vipps.no, under the 'Utvikler' tab.
        Keep it secret.
  responses:
    BadRequestError: #400
      description: Invalid request, check your parameters
      content:
        application/json;charset=UTF-8:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/VippsApiError"
    UnauthorizedError: #401
      description: Access token is missing or invalid
    NotFoundError: #404
      description: Item does not exist (and never has)
    ServerError: #500
      description: Internal server error
      content:
        application/json;charset=UTF-8:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/VippsApiError"
    UnavailableError: #503
      description: Service unavailable
    TimeoutError: #504
      description: Timeout
  schemas:
    AgreementRequest:
      type: object
      required:
        - currency
        - interval
        - intervalCount
        - isApp
        - merchantAgreementUrl
        - merchantRedirectUrl
        - price
        - productDescription
        - productName
      properties:
        campaign:
          $ref: "#/components/schemas/CampaignRequest"
        currency:
          $ref: "#/components/schemas/Currency"
        customerPhoneNumber:
          type: string
          description: "Customers phone number (if available). Used to simplify the
            following Vipps interaction. MSISDN: https://www.msisdn.org"
          maxLength: 15
          example: "4791234567"
        initialCharge:
          $ref: "#/components/schemas/InitialCharge"
        interval:
          $ref: '#/components/schemas/Interval'
        intervalCount:
          type: integer
          format: int32
          description: "Number of intervals between charges. Example: interval=week,
            intervalCount=2 to be able to charge every two weeks. Charges should
            occur at least once a year"
          minimum: 1
          maximum: 31
          example: 2
        isApp:
          type: boolean
          description: If merchant is redirecting user from an app or a mobile device.
          example: true
        merchantAgreementUrl:
          type: string
          description: URL where Vipps can send the customer to view/manage their
            subscription. Typically a "My page" where the user can change, pause, cancel, etc.
            We recommend letting users logg inn with Vipps, not with username and password.
          example: https://www.example.com/vipps-subscriptions/1234/
        merchantRedirectUrl:
          type: string
          description: URL where customer should be redirected after the agreement has been
            approved/rejected in the Vipps mobile application.
          example: https://api.example.com/vipps-landing
        price:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          minimum: 100
          example: 39900
        productName:
          type: string
          description: Product name (short)
          maxLength: 45
          example: Premier League subscription
        productDescription:
          type: string
          description: Product description (longer)
          maxLength: 100
          example: Access to all games of English top football
        scope:
          type: string
          description: Space separated list of the user profile-data scopes to require for the agreement.
          example: address name email birthDate phoneNumber
    AgreementUpdate:
      type: object
      properties:
        campaign:
          $ref: "#/components/schemas/Campaign"
        price:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          minimum: 100
          example: 39900
        productName:
          type: string
          description: Product name (short)
          maxLength: 45
          example: Premier League subscription
        productDescription:
          type: string
          description: Product description (longer)
          maxLength: 100
          example: Access to all games of English top football
        status:
          $ref: "#/components/schemas/AgreementStatus"
    Agreement:
      type: object
      required:
        - interval
        - intervalCount
        - price
        - productDescription
        - productName
        - status
      properties:
        campaign:
          $ref: "#/components/schemas/Campaign"
        currency:
          $ref: "#/components/schemas/Currency"
        id:
          type: string
          description: Uniquely identifies this agreement
          maxLength: 36
          example: agr_5kSeqzFAMkfBbc
        interval:
          $ref: "#/components/schemas/Interval"
        intervalCount:
          type: integer
          format: int32
          description: "Number of intervals between charges. Example: interval=week,
            intervalCount=2 to be able to charge every two weeks. Charges should
            occur at least once a year."
          default: 1
          minimum: 1
          maximum: 31
          example: 1
        price:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          minimum: 100
          example: 39900
        productName:
          type: string
          description: Product name (short)
          maxLength: 45
          example: Premier League subscription
        productDescription:
          type: string
          description: Product description (longer)
          maxLength: 100
          example: Access to all games of English top football
        start:
          type: string
          format: date-time
          description: Date when agreement was started.
          example: 2019-01-01T00:00:00Z
        stop:
          type: string
          format: date-time
          description: Date when agreement was stopped.
          example: 2019-12-31T00:00:00Z
        status:
          $ref: "#/components/schemas/AgreementStatus"
        sub:
          type: string
          format: uuid
          description: User identifier (subject). Will be null if profile data was not requested.
          example: 8d7de74e-0243-11eb-adc1-0242ac120002
        userinfoUrl:
          type: string
          format: uri
          description: The full path of the URL for the userinfo endpoint where the user data can be retrieved. Will be null if profile data was not requested.
          example: https://api.vipps.no/vipps-userinfo-api/userinfo/8d7de74e-0243-11eb-adc1-0242ac120002

    AgreementReference:
      type: object
      required:
        - agreementId
        - agreementResource
        - vippsConfirmationUrl
        - chargeId
      properties:
        agreementResource:
          type: string
          description: Reference to Agreement which user may agree to. Initially the
            Agreement is in a pendingUserApproval state, and it enters active
            state once user has approved in the Vipps application.
          example: https://api.vipps.no/v2/agreements/agr_5kSeqzFAMkfBbc
        agreementId:
          type: string
          description: Id of a Agreement which user may agree to. Initially the Agreement
            is in a pendingUserApproval state, and it enters active state once
            user has approved in the Vipps application.
          example: agr_5kSeqzFAMkfBbc
        vippsConfirmationUrl:
          type: string
          description: The `vippsConfirmationUrl` should be used to redirect the
            user to the Vipps landing page in a desktop flow (with `https://`),
            or to the Vipps app in a mobile flow (with `vipps://`), where the
            user can then approve the agreement.
          example: https://api.vipps.no/v2/register/U6JUjQXq8HQmmV
        chargeId:
          type: string
          description: The Id of the initialCharge if given, otherwise `null`.
            If an `orderId` is specified this is used as the `chargeId` otherwise it is auto generated.
          example: chr_123abc456
    AgreementUpdateReference:
      type: object
      required:
        - agreementId
      properties:
        agreementId:
          type: string
          description: Id of a Agreement which user may agree to. Initially the Agreement
            is in a pendingUserApproval state, and it enters active state once
            user has approved in the Vipps application.
          example: agr_5kSeqzFAMkfBbc
    CampaignRequest:
      type: object
      required:
        - campaignPrice
        - end
      properties:
        campaignPrice:
          type: integer
          format: int32
          description: The price of the agreement in the discount period. The lowering of
            the price will be displayed in-app.
          minimum: 100
          example: 1500
        end:
          type: string
          format: date-time
          description: The date and time the campaign ends. Needs to be UTC
          example: 2019-06-01T00:00:00Z
    Campaign:
      allOf:
        - $ref: "#/components/schemas/CampaignRequest"
        - type: object
          required:
          - start
          properties:
            start:
              type: string
              format: date-time
              description: The date and time the campaign starts. Needs to be UTC
              example: 2019-06-01T00:00:00Z
    InitialCharge:
      type: object
      required:
        - amount
        - currency
        - description
        - transactionType
      properties:
        amount:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          example: 49900
          minimum: 100
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: This field is visible to the end user in-app
          example: Premier League subscription
          maxLength: 45
        transactionType:
          $ref: "#/components/schemas/TransactionType"
        orderId:
          type: string
          description: Optional orderId, will be auto generated if not provided
          example: acme-shop-123-order123abc
          maxLength: 15
      description: An initial charge for a new agreement. The charge will be executed
        immediately when the user approves the agreement.
    ChargeRequest:
      type: object
      required:
        - amount
        - description
        - due
      properties:
        amount:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          example: 49900
          minimum: 100
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: This field is visible to the end user in-app
          example: Premier League subscription
          maxLength: 45
        due:
          type: string
          format: date
          description: YYYY-MM-DD
          example: 2030-12-31
        retryDays:
          type: integer
          format: int32
          description: The service will attempt to charge the customer for N days [non
            inclusive], must be null or contain a value >= 0. If zero, no
            retries will be performed
          default: 0
          minimum: 0
          maximum: 14
          example: 5
        orderId:
          type: string
          description: Optional orderId, will be auto generated if not provided
          example: acme-shop-123-order123abc
          maxLength: 15
    ChargeReference:
      type: object
      required:
        - chargeId
      properties:
        chargeId:
          type: string
          description: ID of the created charge
          example: chr_123abc456
    Charge:
      type: object
      required:
        - transactionId
        - description
        - type
        - amount
        - amountRefunded
        - due
        - id
        - status
      properties:
        amount:
          type: integer
          format: int32
          description: Treated as a whole sum postfixed with two decimals for cents, eg 234
            = 2.34 NOK
          example: 39900
        amountRefunded:
          type: integer
          format: int32
          description: >-
            The total amount which has been refunded, in case of status
            refund/partial refund.

            Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK
          example: 39900
        description:
          type: string
          description: Description of the charge
          example: "Premier League subscription: September"
        due:
          type: string
          format: date-time
          description: The due date for this charge
          example: 2019-06-01T00:00:00Z
        id:
          type: string
          description: Identifier for this charge (for this customer's subscription).
          default: NOT_SET
          maxLength: 15
          example: chg_WCVbcAbRCmu2zk
        status:
          $ref: "#/components/schemas/ChargeStatus"
        transactionId:
          type: string
          description: Contains null until the status has reached CHARGED
          maxLength: 36
          example: "5001419121"
        type:
          $ref: "#/components/schemas/ChargeType"
    VippsApiError:
      type: object
      required:
        - contextId
        - message
      properties:
        code:
          type: string
        field:
          type: string
        message:
          type: string
          example: Description of the error
        contextId:
          type: string
          example: 0b7a2d85-8233-4a0f-867b-fa77a8cdf8de
    HealthCheckStatus:
      type: object
      required:
        - application
        - cosmosDb
        - paymentDb
      properties:
        application:
          type: boolean
        cosmosDb:
          type: boolean
        paymentDb:
          type: boolean
    RefundRequest:
      type: object
      required:
        - amount
        - description
      properties:
        amount:
          type: integer
          format: int32
          description: >-
            The total amount which has been refunded, in case of status
            refund/partial refund.
            Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK
          minimum: 100
          example: 49900
        description:
          type: string
          description: A textual description of the operation, which will be displayed in
            the users app.
          maxLength: 45
          example: Forgot to apply discount, refunding 50%
    AgreementStatus:
      type: string
      description: Status of the agreement.
      example: ACTIVE
      enum:
        - PENDING
        - ACTIVE
        - STOPPED
        - EXPIRED
    ChargeStatus:
      type: string
      default: PENDING
      example: PENDING
      enum:
        - PENDING
        - DUE
        - RESERVED
        - CHARGED
        - FAILED
        - CANCELLED
        - PARTIALLY_REFUNDED
        - REFUNDED
        - PROCESSING
    Currency:
      type: string
      description: "ISO-4217: https://www.iso.org/iso-4217-currency-codes.html"
      default: NOK
      enum:
        - NOK
      minLength: 3
      maxLength: 3
      pattern: ^[A-Z]{3}$
      example: NOK
    TransactionType:
      type: string
      description: Type of transaction, either direct capture or reserve capture
      enum:
        - DIRECT_CAPTURE
        - RESERVE_CAPTURE
      example: DIRECT_CAPTURE
    ChargeType:
      type: string
      default: RECURRING
      enum:
        - INITIAL
        - RECURRING
      example: RECURRING
    Interval:
      type: string
      description: Interval for subscription
      default: MONTH
      pattern: ^(MONTH|WEEK|DAY)$
      enum:
        - MONTH
        - WEEK
        - DAY
      example: MONTH
    IdempotencyKeyFormat:
      type: string
      maxLength: 40
      pattern: ^[a-zA-Z0-9]*$
      example: kRk3uEeiogxLu1yGSZRlNgsIv3TuNS
    AccessTokenResponse:
      type: object
      properties:
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: string
          example: "3600"
        ext_expires_in:
          type: string
          example: "3600"
        expires_on:
          type: string
          example: "1569831424"
        not_before:
          type: string
          example: "1569827524"
        resource:
          type: string
          example: 00000003-0000-0000-d000-000000000000
        access_token:
          type: string
          example: aGFoYWhhaGFoYWhhaGFoYWhoYWhhYWhhaGEK
